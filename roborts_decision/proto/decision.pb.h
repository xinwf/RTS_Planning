// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#ifndef PROTOBUF_decision_2eproto__INCLUDED
#define PROTOBUF_decision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_decision_2eproto();
void protobuf_AssignDesc_decision_2eproto();
void protobuf_ShutdownFile_decision_2eproto();

class BlueOrRedGroup;
class DecisionConfig;
class EscapeConstraint;
class MultiRobot;
class Point;
class SearchConstraint;
class WhirlVel;

// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float roll = 4;
  void clear_roll();
  static const int kRollFieldNumber = 4;
  float roll() const;
  void set_roll(float value);

  // optional float pitch = 5;
  void clear_pitch();
  static const int kPitchFieldNumber = 5;
  float pitch() const;
  void set_pitch(float value);

  // optional float yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class EscapeConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.EscapeConstraint) */ {
 public:
  EscapeConstraint();
  virtual ~EscapeConstraint();

  EscapeConstraint(const EscapeConstraint& from);

  inline EscapeConstraint& operator=(const EscapeConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EscapeConstraint& default_instance();

  void Swap(EscapeConstraint* other);

  // implements Message ----------------------------------------------

  inline EscapeConstraint* New() const { return New(NULL); }

  EscapeConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EscapeConstraint& from);
  void MergeFrom(const EscapeConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EscapeConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left_x_limit = 1;
  void clear_left_x_limit();
  static const int kLeftXLimitFieldNumber = 1;
  float left_x_limit() const;
  void set_left_x_limit(float value);

  // optional float right_x_limit = 2;
  void clear_right_x_limit();
  static const int kRightXLimitFieldNumber = 2;
  float right_x_limit() const;
  void set_right_x_limit(float value);

  // optional float robot_x_limit = 3;
  void clear_robot_x_limit();
  static const int kRobotXLimitFieldNumber = 3;
  float robot_x_limit() const;
  void set_robot_x_limit(float value);

  // optional float left_random_min_x = 4;
  void clear_left_random_min_x();
  static const int kLeftRandomMinXFieldNumber = 4;
  float left_random_min_x() const;
  void set_left_random_min_x(float value);

  // optional float left_random_max_x = 5;
  void clear_left_random_max_x();
  static const int kLeftRandomMaxXFieldNumber = 5;
  float left_random_max_x() const;
  void set_left_random_max_x(float value);

  // optional float right_random_min_x = 6;
  void clear_right_random_min_x();
  static const int kRightRandomMinXFieldNumber = 6;
  float right_random_min_x() const;
  void set_right_random_min_x(float value);

  // optional float right_random_max_x = 7;
  void clear_right_random_max_x();
  static const int kRightRandomMaxXFieldNumber = 7;
  float right_random_max_x() const;
  void set_right_random_max_x(float value);

  // optional int32 obstacle_count = 8;
  void clear_obstacle_count();
  static const int kObstacleCountFieldNumber = 8;
  ::google::protobuf::int32 obstacle_count() const;
  void set_obstacle_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:roborts_decision.EscapeConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float left_x_limit_;
  float right_x_limit_;
  float robot_x_limit_;
  float left_random_min_x_;
  float left_random_max_x_;
  float right_random_min_x_;
  float right_random_max_x_;
  ::google::protobuf::int32 obstacle_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static EscapeConstraint* default_instance_;
};
// -------------------------------------------------------------------

class SearchConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.SearchConstraint) */ {
 public:
  SearchConstraint();
  virtual ~SearchConstraint();

  SearchConstraint(const SearchConstraint& from);

  inline SearchConstraint& operator=(const SearchConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchConstraint& default_instance();

  void Swap(SearchConstraint* other);

  // implements Message ----------------------------------------------

  inline SearchConstraint* New() const { return New(NULL); }

  SearchConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchConstraint& from);
  void MergeFrom(const SearchConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x_limit = 1;
  void clear_x_limit();
  static const int kXLimitFieldNumber = 1;
  float x_limit() const;
  void set_x_limit(float value);

  // optional float y_limit = 2;
  void clear_y_limit();
  static const int kYLimitFieldNumber = 2;
  float y_limit() const;
  void set_y_limit(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.SearchConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_limit_;
  float y_limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static SearchConstraint* default_instance_;
};
// -------------------------------------------------------------------

class WhirlVel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.WhirlVel) */ {
 public:
  WhirlVel();
  virtual ~WhirlVel();

  WhirlVel(const WhirlVel& from);

  inline WhirlVel& operator=(const WhirlVel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhirlVel& default_instance();

  void Swap(WhirlVel* other);

  // implements Message ----------------------------------------------

  inline WhirlVel* New() const { return New(NULL); }

  WhirlVel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhirlVel& from);
  void MergeFrom(const WhirlVel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WhirlVel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle_x_vel = 1;
  void clear_angle_x_vel();
  static const int kAngleXVelFieldNumber = 1;
  float angle_x_vel() const;
  void set_angle_x_vel(float value);

  // optional float angle_y_vel = 2;
  void clear_angle_y_vel();
  static const int kAngleYVelFieldNumber = 2;
  float angle_y_vel() const;
  void set_angle_y_vel(float value);

  // optional float angle_z_vel = 3;
  void clear_angle_z_vel();
  static const int kAngleZVelFieldNumber = 3;
  float angle_z_vel() const;
  void set_angle_z_vel(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.WhirlVel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float angle_x_vel_;
  float angle_y_vel_;
  float angle_z_vel_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static WhirlVel* default_instance_;
};
// -------------------------------------------------------------------

class MultiRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.MultiRobot) */ {
 public:
  MultiRobot();
  virtual ~MultiRobot();

  MultiRobot(const MultiRobot& from);

  inline MultiRobot& operator=(const MultiRobot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiRobot& default_instance();

  void Swap(MultiRobot* other);

  // implements Message ----------------------------------------------

  inline MultiRobot* New() const { return New(NULL); }

  MultiRobot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiRobot& from);
  void MergeFrom(const MultiRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiRobot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .roborts_decision.Point start_position = 7;
  bool has_start_position() const;
  void clear_start_position();
  static const int kStartPositionFieldNumber = 7;
  const ::roborts_decision::Point& start_position() const;
  ::roborts_decision::Point* mutable_start_position();
  ::roborts_decision::Point* release_start_position();
  void set_allocated_start_position(::roborts_decision::Point* start_position);

  // @@protoc_insertion_point(class_scope:roborts_decision.MultiRobot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::roborts_decision::Point* start_position_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static MultiRobot* default_instance_;
};
// -------------------------------------------------------------------

class BlueOrRedGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.BlueOrRedGroup) */ {
 public:
  BlueOrRedGroup();
  virtual ~BlueOrRedGroup();

  BlueOrRedGroup(const BlueOrRedGroup& from);

  inline BlueOrRedGroup& operator=(const BlueOrRedGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlueOrRedGroup& default_instance();

  void Swap(BlueOrRedGroup* other);

  // implements Message ----------------------------------------------

  inline BlueOrRedGroup* New() const { return New(NULL); }

  BlueOrRedGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlueOrRedGroup& from);
  void MergeFrom(const BlueOrRedGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlueOrRedGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .roborts_decision.MultiRobot master_bot = 1;
  bool has_master_bot() const;
  void clear_master_bot();
  static const int kMasterBotFieldNumber = 1;
  const ::roborts_decision::MultiRobot& master_bot() const;
  ::roborts_decision::MultiRobot* mutable_master_bot();
  ::roborts_decision::MultiRobot* release_master_bot();
  void set_allocated_master_bot(::roborts_decision::MultiRobot* master_bot);

  // optional .roborts_decision.MultiRobot wing_bot = 2;
  bool has_wing_bot() const;
  void clear_wing_bot();
  static const int kWingBotFieldNumber = 2;
  const ::roborts_decision::MultiRobot& wing_bot() const;
  ::roborts_decision::MultiRobot* mutable_wing_bot();
  ::roborts_decision::MultiRobot* release_wing_bot();
  void set_allocated_wing_bot(::roborts_decision::MultiRobot* wing_bot);

  // optional .roborts_decision.Point reload_point = 3;
  bool has_reload_point() const;
  void clear_reload_point();
  static const int kReloadPointFieldNumber = 3;
  const ::roborts_decision::Point& reload_point() const;
  ::roborts_decision::Point* mutable_reload_point();
  ::roborts_decision::Point* release_reload_point();
  void set_allocated_reload_point(::roborts_decision::Point* reload_point);

  // optional .roborts_decision.Point shield_point = 4;
  bool has_shield_point() const;
  void clear_shield_point();
  static const int kShieldPointFieldNumber = 4;
  const ::roborts_decision::Point& shield_point() const;
  ::roborts_decision::Point* mutable_shield_point();
  ::roborts_decision::Point* release_shield_point();
  void set_allocated_shield_point(::roborts_decision::Point* shield_point);

  // repeated .roborts_decision.Point patrol = 5;
  int patrol_size() const;
  void clear_patrol();
  static const int kPatrolFieldNumber = 5;
  const ::roborts_decision::Point& patrol(int index) const;
  ::roborts_decision::Point* mutable_patrol(int index);
  ::roborts_decision::Point* add_patrol();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_patrol();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      patrol() const;

  // @@protoc_insertion_point(class_scope:roborts_decision.BlueOrRedGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::roborts_decision::MultiRobot* master_bot_;
  ::roborts_decision::MultiRobot* wing_bot_;
  ::roborts_decision::Point* reload_point_;
  ::roborts_decision::Point* shield_point_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > patrol_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static BlueOrRedGroup* default_instance_;
};
// -------------------------------------------------------------------

class DecisionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roborts_decision.DecisionConfig) */ {
 public:
  DecisionConfig();
  virtual ~DecisionConfig();

  DecisionConfig(const DecisionConfig& from);

  inline DecisionConfig& operator=(const DecisionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionConfig& default_instance();

  void Swap(DecisionConfig* other);

  // implements Message ----------------------------------------------

  inline DecisionConfig* New() const { return New(NULL); }

  DecisionConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecisionConfig& from);
  void MergeFrom(const DecisionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecisionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strategy = 1;
  void clear_strategy();
  static const int kStrategyFieldNumber = 1;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // optional bool use_camera = 2;
  void clear_use_camera();
  static const int kUseCameraFieldNumber = 2;
  bool use_camera() const;
  void set_use_camera(bool value);

  // optional bool master = 3;
  void clear_master();
  static const int kMasterFieldNumber = 3;
  bool master() const;
  void set_master(bool value);

  // optional bool isblue = 4;
  void clear_isblue();
  static const int kIsblueFieldNumber = 4;
  bool isblue() const;
  void set_isblue(bool value);

  // optional bool usewifi = 5;
  void clear_usewifi();
  static const int kUsewifiFieldNumber = 5;
  bool usewifi() const;
  void set_usewifi(bool value);

  // optional string master_ip = 6;
  void clear_master_ip();
  static const int kMasterIpFieldNumber = 6;
  const ::std::string& master_ip() const;
  void set_master_ip(const ::std::string& value);
  void set_master_ip(const char* value);
  void set_master_ip(const char* value, size_t size);
  ::std::string* mutable_master_ip();
  ::std::string* release_master_ip();
  void set_allocated_master_ip(::std::string* master_ip);

  // optional string guard_ip = 7;
  void clear_guard_ip();
  static const int kGuardIpFieldNumber = 7;
  const ::std::string& guard_ip() const;
  void set_guard_ip(const ::std::string& value);
  void set_guard_ip(const char* value);
  void set_guard_ip(const char* value, size_t size);
  ::std::string* mutable_guard_ip();
  ::std::string* release_guard_ip();
  void set_allocated_guard_ip(::std::string* guard_ip);

  // optional int32 remain_bullet = 8;
  void clear_remain_bullet();
  static const int kRemainBulletFieldNumber = 8;
  ::google::protobuf::int32 remain_bullet() const;
  void set_remain_bullet(::google::protobuf::int32 value);

  // optional .roborts_decision.EscapeConstraint escape = 9;
  bool has_escape() const;
  void clear_escape();
  static const int kEscapeFieldNumber = 9;
  const ::roborts_decision::EscapeConstraint& escape() const;
  ::roborts_decision::EscapeConstraint* mutable_escape();
  ::roborts_decision::EscapeConstraint* release_escape();
  void set_allocated_escape(::roborts_decision::EscapeConstraint* escape);

  // optional .roborts_decision.BlueOrRedGroup blue = 10;
  bool has_blue() const;
  void clear_blue();
  static const int kBlueFieldNumber = 10;
  const ::roborts_decision::BlueOrRedGroup& blue() const;
  ::roborts_decision::BlueOrRedGroup* mutable_blue();
  ::roborts_decision::BlueOrRedGroup* release_blue();
  void set_allocated_blue(::roborts_decision::BlueOrRedGroup* blue);

  // optional .roborts_decision.BlueOrRedGroup red = 11;
  bool has_red() const;
  void clear_red();
  static const int kRedFieldNumber = 11;
  const ::roborts_decision::BlueOrRedGroup& red() const;
  ::roborts_decision::BlueOrRedGroup* mutable_red();
  ::roborts_decision::BlueOrRedGroup* release_red();
  void set_allocated_red(::roborts_decision::BlueOrRedGroup* red);

  // optional .roborts_decision.SearchConstraint search_limit = 12;
  bool has_search_limit() const;
  void clear_search_limit();
  static const int kSearchLimitFieldNumber = 12;
  const ::roborts_decision::SearchConstraint& search_limit() const;
  ::roborts_decision::SearchConstraint* mutable_search_limit();
  ::roborts_decision::SearchConstraint* release_search_limit();
  void set_allocated_search_limit(::roborts_decision::SearchConstraint* search_limit);

  // optional .roborts_decision.WhirlVel whirl_vel = 13;
  bool has_whirl_vel() const;
  void clear_whirl_vel();
  static const int kWhirlVelFieldNumber = 13;
  const ::roborts_decision::WhirlVel& whirl_vel() const;
  ::roborts_decision::WhirlVel* mutable_whirl_vel();
  ::roborts_decision::WhirlVel* release_whirl_vel();
  void set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel);

  // repeated .roborts_decision.Point lurk_position = 14;
  int lurk_position_size() const;
  void clear_lurk_position();
  static const int kLurkPositionFieldNumber = 14;
  const ::roborts_decision::Point& lurk_position(int index) const;
  ::roborts_decision::Point* mutable_lurk_position(int index);
  ::roborts_decision::Point* add_lurk_position();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_lurk_position();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      lurk_position() const;

  // repeated .roborts_decision.Point search_region_1 = 15;
  int search_region_1_size() const;
  void clear_search_region_1();
  static const int kSearchRegion1FieldNumber = 15;
  const ::roborts_decision::Point& search_region_1(int index) const;
  ::roborts_decision::Point* mutable_search_region_1(int index);
  ::roborts_decision::Point* add_search_region_1();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_1();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_1() const;

  // repeated .roborts_decision.Point search_region_2 = 16;
  int search_region_2_size() const;
  void clear_search_region_2();
  static const int kSearchRegion2FieldNumber = 16;
  const ::roborts_decision::Point& search_region_2(int index) const;
  ::roborts_decision::Point* mutable_search_region_2(int index);
  ::roborts_decision::Point* add_search_region_2();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_2();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_2() const;

  // repeated .roborts_decision.Point search_region_3 = 17;
  int search_region_3_size() const;
  void clear_search_region_3();
  static const int kSearchRegion3FieldNumber = 17;
  const ::roborts_decision::Point& search_region_3(int index) const;
  ::roborts_decision::Point* mutable_search_region_3(int index);
  ::roborts_decision::Point* add_search_region_3();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_3();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_3() const;

  // repeated .roborts_decision.Point search_region_4 = 18;
  int search_region_4_size() const;
  void clear_search_region_4();
  static const int kSearchRegion4FieldNumber = 18;
  const ::roborts_decision::Point& search_region_4(int index) const;
  ::roborts_decision::Point* mutable_search_region_4(int index);
  ::roborts_decision::Point* add_search_region_4();
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_4();
  const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_4() const;

  // optional bool can_shoot = 19;
  void clear_can_shoot();
  static const int kCanShootFieldNumber = 19;
  bool can_shoot() const;
  void set_can_shoot(bool value);

  // optional int32 shoot_delay_ms = 20;
  void clear_shoot_delay_ms();
  static const int kShootDelayMsFieldNumber = 20;
  ::google::protobuf::int32 shoot_delay_ms() const;
  void set_shoot_delay_ms(::google::protobuf::int32 value);

  // optional bool use_refree = 21;
  void clear_use_refree();
  static const int kUseRefreeFieldNumber = 21;
  bool use_refree() const;
  void set_use_refree(bool value);

  // optional float map_offset_x = 22;
  void clear_map_offset_x();
  static const int kMapOffsetXFieldNumber = 22;
  float map_offset_x() const;
  void set_map_offset_x(float value);

  // optional float map_offset_y = 23;
  void clear_map_offset_y();
  static const int kMapOffsetYFieldNumber = 23;
  float map_offset_y() const;
  void set_map_offset_y(float value);

  // optional bool auto_init_pose = 24;
  void clear_auto_init_pose();
  static const int kAutoInitPoseFieldNumber = 24;
  bool auto_init_pose() const;
  void set_auto_init_pose(bool value);

  // optional bool auto_fix_localization = 25;
  void clear_auto_fix_localization();
  static const int kAutoFixLocalizationFieldNumber = 25;
  bool auto_fix_localization() const;
  void set_auto_fix_localization(bool value);

  // @@protoc_insertion_point(class_scope:roborts_decision.DecisionConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  bool use_camera_;
  bool master_;
  bool isblue_;
  bool usewifi_;
  ::google::protobuf::int32 remain_bullet_;
  ::google::protobuf::internal::ArenaStringPtr master_ip_;
  ::google::protobuf::internal::ArenaStringPtr guard_ip_;
  ::roborts_decision::EscapeConstraint* escape_;
  ::roborts_decision::BlueOrRedGroup* blue_;
  ::roborts_decision::BlueOrRedGroup* red_;
  ::roborts_decision::SearchConstraint* search_limit_;
  ::roborts_decision::WhirlVel* whirl_vel_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > lurk_position_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_1_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_2_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_3_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_4_;
  ::google::protobuf::int32 shoot_delay_ms_;
  float map_offset_x_;
  bool can_shoot_;
  bool use_refree_;
  bool auto_init_pose_;
  bool auto_fix_localization_;
  float map_offset_y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static DecisionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.x)
}

// optional float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.y)
}

// optional float z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.z)
}

// optional float roll = 4;
inline void Point::clear_roll() {
  roll_ = 0;
}
inline float Point::roll() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.roll)
  return roll_;
}
inline void Point::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.roll)
}

// optional float pitch = 5;
inline void Point::clear_pitch() {
  pitch_ = 0;
}
inline float Point::pitch() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.pitch)
  return pitch_;
}
inline void Point::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.pitch)
}

// optional float yaw = 6;
inline void Point::clear_yaw() {
  yaw_ = 0;
}
inline float Point::yaw() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.yaw)
  return yaw_;
}
inline void Point::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.yaw)
}

// -------------------------------------------------------------------

// EscapeConstraint

// optional float left_x_limit = 1;
inline void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
}
inline float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_x_limit)
  return left_x_limit_;
}
inline void EscapeConstraint::set_left_x_limit(float value) {
  
  left_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
inline void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
}
inline float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_x_limit)
  return right_x_limit_;
}
inline void EscapeConstraint::set_right_x_limit(float value) {
  
  right_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
inline void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
}
inline float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.robot_x_limit)
  return robot_x_limit_;
}
inline void EscapeConstraint::set_robot_x_limit(float value) {
  
  robot_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
inline void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
}
inline float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_min_x)
  return left_random_min_x_;
}
inline void EscapeConstraint::set_left_random_min_x(float value) {
  
  left_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
inline void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
}
inline float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_max_x)
  return left_random_max_x_;
}
inline void EscapeConstraint::set_left_random_max_x(float value) {
  
  left_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
inline void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
}
inline float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_min_x)
  return right_random_min_x_;
}
inline void EscapeConstraint::set_right_random_min_x(float value) {
  
  right_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
inline void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
}
inline float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_max_x)
  return right_random_max_x_;
}
inline void EscapeConstraint::set_right_random_max_x(float value) {
  
  right_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_max_x)
}

// optional int32 obstacle_count = 8;
inline void EscapeConstraint::clear_obstacle_count() {
  obstacle_count_ = 0;
}
inline ::google::protobuf::int32 EscapeConstraint::obstacle_count() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.obstacle_count)
  return obstacle_count_;
}
inline void EscapeConstraint::set_obstacle_count(::google::protobuf::int32 value) {
  
  obstacle_count_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.obstacle_count)
}

// -------------------------------------------------------------------

// SearchConstraint

// optional float x_limit = 1;
inline void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
}
inline float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.x_limit)
  return x_limit_;
}
inline void SearchConstraint::set_x_limit(float value) {
  
  x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
inline void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
}
inline float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.y_limit)
  return y_limit_;
}
inline void SearchConstraint::set_y_limit(float value) {
  
  y_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.y_limit)
}

// -------------------------------------------------------------------

// WhirlVel

// optional float angle_x_vel = 1;
inline void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
}
inline float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_x_vel)
  return angle_x_vel_;
}
inline void WhirlVel::set_angle_x_vel(float value) {
  
  angle_x_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
inline void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
}
inline float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_y_vel)
  return angle_y_vel_;
}
inline void WhirlVel::set_angle_y_vel(float value) {
  
  angle_y_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
inline void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
}
inline float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_z_vel)
  return angle_z_vel_;
}
inline void WhirlVel::set_angle_z_vel(float value) {
  
  angle_z_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_z_vel)
}

// -------------------------------------------------------------------

// MultiRobot

// optional .roborts_decision.Point start_position = 7;
inline bool MultiRobot::has_start_position() const {
  return !_is_default_instance_ && start_position_ != NULL;
}
inline void MultiRobot::clear_start_position() {
  if (GetArenaNoVirtual() == NULL && start_position_ != NULL) delete start_position_;
  start_position_ = NULL;
}
inline const ::roborts_decision::Point& MultiRobot::start_position() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MultiRobot.start_position)
  return start_position_ != NULL ? *start_position_ : *default_instance_->start_position_;
}
inline ::roborts_decision::Point* MultiRobot::mutable_start_position() {
  
  if (start_position_ == NULL) {
    start_position_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.MultiRobot.start_position)
  return start_position_;
}
inline ::roborts_decision::Point* MultiRobot::release_start_position() {
  // @@protoc_insertion_point(field_release:roborts_decision.MultiRobot.start_position)
  
  ::roborts_decision::Point* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
inline void MultiRobot::set_allocated_start_position(::roborts_decision::Point* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MultiRobot.start_position)
}

// -------------------------------------------------------------------

// BlueOrRedGroup

// optional .roborts_decision.MultiRobot master_bot = 1;
inline bool BlueOrRedGroup::has_master_bot() const {
  return !_is_default_instance_ && master_bot_ != NULL;
}
inline void BlueOrRedGroup::clear_master_bot() {
  if (GetArenaNoVirtual() == NULL && master_bot_ != NULL) delete master_bot_;
  master_bot_ = NULL;
}
inline const ::roborts_decision::MultiRobot& BlueOrRedGroup::master_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.master_bot)
  return master_bot_ != NULL ? *master_bot_ : *default_instance_->master_bot_;
}
inline ::roborts_decision::MultiRobot* BlueOrRedGroup::mutable_master_bot() {
  
  if (master_bot_ == NULL) {
    master_bot_ = new ::roborts_decision::MultiRobot;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.master_bot)
  return master_bot_;
}
inline ::roborts_decision::MultiRobot* BlueOrRedGroup::release_master_bot() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.master_bot)
  
  ::roborts_decision::MultiRobot* temp = master_bot_;
  master_bot_ = NULL;
  return temp;
}
inline void BlueOrRedGroup::set_allocated_master_bot(::roborts_decision::MultiRobot* master_bot) {
  delete master_bot_;
  master_bot_ = master_bot;
  if (master_bot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.master_bot)
}

// optional .roborts_decision.MultiRobot wing_bot = 2;
inline bool BlueOrRedGroup::has_wing_bot() const {
  return !_is_default_instance_ && wing_bot_ != NULL;
}
inline void BlueOrRedGroup::clear_wing_bot() {
  if (GetArenaNoVirtual() == NULL && wing_bot_ != NULL) delete wing_bot_;
  wing_bot_ = NULL;
}
inline const ::roborts_decision::MultiRobot& BlueOrRedGroup::wing_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.wing_bot)
  return wing_bot_ != NULL ? *wing_bot_ : *default_instance_->wing_bot_;
}
inline ::roborts_decision::MultiRobot* BlueOrRedGroup::mutable_wing_bot() {
  
  if (wing_bot_ == NULL) {
    wing_bot_ = new ::roborts_decision::MultiRobot;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.wing_bot)
  return wing_bot_;
}
inline ::roborts_decision::MultiRobot* BlueOrRedGroup::release_wing_bot() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.wing_bot)
  
  ::roborts_decision::MultiRobot* temp = wing_bot_;
  wing_bot_ = NULL;
  return temp;
}
inline void BlueOrRedGroup::set_allocated_wing_bot(::roborts_decision::MultiRobot* wing_bot) {
  delete wing_bot_;
  wing_bot_ = wing_bot;
  if (wing_bot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.wing_bot)
}

// optional .roborts_decision.Point reload_point = 3;
inline bool BlueOrRedGroup::has_reload_point() const {
  return !_is_default_instance_ && reload_point_ != NULL;
}
inline void BlueOrRedGroup::clear_reload_point() {
  if (GetArenaNoVirtual() == NULL && reload_point_ != NULL) delete reload_point_;
  reload_point_ = NULL;
}
inline const ::roborts_decision::Point& BlueOrRedGroup::reload_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.reload_point)
  return reload_point_ != NULL ? *reload_point_ : *default_instance_->reload_point_;
}
inline ::roborts_decision::Point* BlueOrRedGroup::mutable_reload_point() {
  
  if (reload_point_ == NULL) {
    reload_point_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.reload_point)
  return reload_point_;
}
inline ::roborts_decision::Point* BlueOrRedGroup::release_reload_point() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.reload_point)
  
  ::roborts_decision::Point* temp = reload_point_;
  reload_point_ = NULL;
  return temp;
}
inline void BlueOrRedGroup::set_allocated_reload_point(::roborts_decision::Point* reload_point) {
  delete reload_point_;
  reload_point_ = reload_point;
  if (reload_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.reload_point)
}

// optional .roborts_decision.Point shield_point = 4;
inline bool BlueOrRedGroup::has_shield_point() const {
  return !_is_default_instance_ && shield_point_ != NULL;
}
inline void BlueOrRedGroup::clear_shield_point() {
  if (GetArenaNoVirtual() == NULL && shield_point_ != NULL) delete shield_point_;
  shield_point_ = NULL;
}
inline const ::roborts_decision::Point& BlueOrRedGroup::shield_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.shield_point)
  return shield_point_ != NULL ? *shield_point_ : *default_instance_->shield_point_;
}
inline ::roborts_decision::Point* BlueOrRedGroup::mutable_shield_point() {
  
  if (shield_point_ == NULL) {
    shield_point_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.shield_point)
  return shield_point_;
}
inline ::roborts_decision::Point* BlueOrRedGroup::release_shield_point() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.shield_point)
  
  ::roborts_decision::Point* temp = shield_point_;
  shield_point_ = NULL;
  return temp;
}
inline void BlueOrRedGroup::set_allocated_shield_point(::roborts_decision::Point* shield_point) {
  delete shield_point_;
  shield_point_ = shield_point;
  if (shield_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.shield_point)
}

// repeated .roborts_decision.Point patrol = 5;
inline int BlueOrRedGroup::patrol_size() const {
  return patrol_.size();
}
inline void BlueOrRedGroup::clear_patrol() {
  patrol_.Clear();
}
inline const ::roborts_decision::Point& BlueOrRedGroup::patrol(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Get(index);
}
inline ::roborts_decision::Point* BlueOrRedGroup::mutable_patrol(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Mutable(index);
}
inline ::roborts_decision::Point* BlueOrRedGroup::add_patrol() {
  // @@protoc_insertion_point(field_add:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
BlueOrRedGroup::mutable_patrol() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.BlueOrRedGroup.patrol)
  return &patrol_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
BlueOrRedGroup::patrol() const {
  // @@protoc_insertion_point(field_list:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_;
}

// -------------------------------------------------------------------

// DecisionConfig

// optional string strategy = 1;
inline void DecisionConfig::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecisionConfig::strategy() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.strategy)
  return strategy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_strategy(const ::std::string& value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.strategy)
}
inline void DecisionConfig::set_strategy(const char* value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.DecisionConfig.strategy)
}
inline void DecisionConfig::set_strategy(const char* value, size_t size) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.DecisionConfig.strategy)
}
inline ::std::string* DecisionConfig::mutable_strategy() {
  
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecisionConfig::release_strategy() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.strategy)
  
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    
  } else {
    
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.strategy)
}

// optional bool use_camera = 2;
inline void DecisionConfig::clear_use_camera() {
  use_camera_ = false;
}
inline bool DecisionConfig::use_camera() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.use_camera)
  return use_camera_;
}
inline void DecisionConfig::set_use_camera(bool value) {
  
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.use_camera)
}

// optional bool master = 3;
inline void DecisionConfig::clear_master() {
  master_ = false;
}
inline bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master)
  return master_;
}
inline void DecisionConfig::set_master(bool value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master)
}

// optional bool isblue = 4;
inline void DecisionConfig::clear_isblue() {
  isblue_ = false;
}
inline bool DecisionConfig::isblue() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.isblue)
  return isblue_;
}
inline void DecisionConfig::set_isblue(bool value) {
  
  isblue_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.isblue)
}

// optional bool usewifi = 5;
inline void DecisionConfig::clear_usewifi() {
  usewifi_ = false;
}
inline bool DecisionConfig::usewifi() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.usewifi)
  return usewifi_;
}
inline void DecisionConfig::set_usewifi(bool value) {
  
  usewifi_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.usewifi)
}

// optional string master_ip = 6;
inline void DecisionConfig::clear_master_ip() {
  master_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecisionConfig::master_ip() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master_ip)
  return master_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_master_ip(const ::std::string& value) {
  
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master_ip)
}
inline void DecisionConfig::set_master_ip(const char* value) {
  
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.DecisionConfig.master_ip)
}
inline void DecisionConfig::set_master_ip(const char* value, size_t size) {
  
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.DecisionConfig.master_ip)
}
inline ::std::string* DecisionConfig::mutable_master_ip() {
  
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.master_ip)
  return master_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecisionConfig::release_master_ip() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.master_ip)
  
  return master_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip != NULL) {
    
  } else {
    
  }
  master_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_ip);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.master_ip)
}

// optional string guard_ip = 7;
inline void DecisionConfig::clear_guard_ip() {
  guard_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecisionConfig::guard_ip() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.guard_ip)
  return guard_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_guard_ip(const ::std::string& value) {
  
  guard_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.guard_ip)
}
inline void DecisionConfig::set_guard_ip(const char* value) {
  
  guard_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.DecisionConfig.guard_ip)
}
inline void DecisionConfig::set_guard_ip(const char* value, size_t size) {
  
  guard_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.DecisionConfig.guard_ip)
}
inline ::std::string* DecisionConfig::mutable_guard_ip() {
  
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.guard_ip)
  return guard_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecisionConfig::release_guard_ip() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.guard_ip)
  
  return guard_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionConfig::set_allocated_guard_ip(::std::string* guard_ip) {
  if (guard_ip != NULL) {
    
  } else {
    
  }
  guard_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guard_ip);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.guard_ip)
}

// optional int32 remain_bullet = 8;
inline void DecisionConfig::clear_remain_bullet() {
  remain_bullet_ = 0;
}
inline ::google::protobuf::int32 DecisionConfig::remain_bullet() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.remain_bullet)
  return remain_bullet_;
}
inline void DecisionConfig::set_remain_bullet(::google::protobuf::int32 value) {
  
  remain_bullet_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.remain_bullet)
}

// optional .roborts_decision.EscapeConstraint escape = 9;
inline bool DecisionConfig::has_escape() const {
  return !_is_default_instance_ && escape_ != NULL;
}
inline void DecisionConfig::clear_escape() {
  if (GetArenaNoVirtual() == NULL && escape_ != NULL) delete escape_;
  escape_ = NULL;
}
inline const ::roborts_decision::EscapeConstraint& DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.escape)
  return escape_ != NULL ? *escape_ : *default_instance_->escape_;
}
inline ::roborts_decision::EscapeConstraint* DecisionConfig::mutable_escape() {
  
  if (escape_ == NULL) {
    escape_ = new ::roborts_decision::EscapeConstraint;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.escape)
  return escape_;
}
inline ::roborts_decision::EscapeConstraint* DecisionConfig::release_escape() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.escape)
  
  ::roborts_decision::EscapeConstraint* temp = escape_;
  escape_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_escape(::roborts_decision::EscapeConstraint* escape) {
  delete escape_;
  escape_ = escape;
  if (escape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.escape)
}

// optional .roborts_decision.BlueOrRedGroup blue = 10;
inline bool DecisionConfig::has_blue() const {
  return !_is_default_instance_ && blue_ != NULL;
}
inline void DecisionConfig::clear_blue() {
  if (GetArenaNoVirtual() == NULL && blue_ != NULL) delete blue_;
  blue_ = NULL;
}
inline const ::roborts_decision::BlueOrRedGroup& DecisionConfig::blue() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.blue)
  return blue_ != NULL ? *blue_ : *default_instance_->blue_;
}
inline ::roborts_decision::BlueOrRedGroup* DecisionConfig::mutable_blue() {
  
  if (blue_ == NULL) {
    blue_ = new ::roborts_decision::BlueOrRedGroup;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.blue)
  return blue_;
}
inline ::roborts_decision::BlueOrRedGroup* DecisionConfig::release_blue() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.blue)
  
  ::roborts_decision::BlueOrRedGroup* temp = blue_;
  blue_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_blue(::roborts_decision::BlueOrRedGroup* blue) {
  delete blue_;
  blue_ = blue;
  if (blue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.blue)
}

// optional .roborts_decision.BlueOrRedGroup red = 11;
inline bool DecisionConfig::has_red() const {
  return !_is_default_instance_ && red_ != NULL;
}
inline void DecisionConfig::clear_red() {
  if (GetArenaNoVirtual() == NULL && red_ != NULL) delete red_;
  red_ = NULL;
}
inline const ::roborts_decision::BlueOrRedGroup& DecisionConfig::red() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.red)
  return red_ != NULL ? *red_ : *default_instance_->red_;
}
inline ::roborts_decision::BlueOrRedGroup* DecisionConfig::mutable_red() {
  
  if (red_ == NULL) {
    red_ = new ::roborts_decision::BlueOrRedGroup;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.red)
  return red_;
}
inline ::roborts_decision::BlueOrRedGroup* DecisionConfig::release_red() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.red)
  
  ::roborts_decision::BlueOrRedGroup* temp = red_;
  red_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_red(::roborts_decision::BlueOrRedGroup* red) {
  delete red_;
  red_ = red;
  if (red) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.red)
}

// optional .roborts_decision.SearchConstraint search_limit = 12;
inline bool DecisionConfig::has_search_limit() const {
  return !_is_default_instance_ && search_limit_ != NULL;
}
inline void DecisionConfig::clear_search_limit() {
  if (GetArenaNoVirtual() == NULL && search_limit_ != NULL) delete search_limit_;
  search_limit_ = NULL;
}
inline const ::roborts_decision::SearchConstraint& DecisionConfig::search_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_limit)
  return search_limit_ != NULL ? *search_limit_ : *default_instance_->search_limit_;
}
inline ::roborts_decision::SearchConstraint* DecisionConfig::mutable_search_limit() {
  
  if (search_limit_ == NULL) {
    search_limit_ = new ::roborts_decision::SearchConstraint;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_limit)
  return search_limit_;
}
inline ::roborts_decision::SearchConstraint* DecisionConfig::release_search_limit() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.search_limit)
  
  ::roborts_decision::SearchConstraint* temp = search_limit_;
  search_limit_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_search_limit(::roborts_decision::SearchConstraint* search_limit) {
  delete search_limit_;
  search_limit_ = search_limit;
  if (search_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.search_limit)
}

// optional .roborts_decision.WhirlVel whirl_vel = 13;
inline bool DecisionConfig::has_whirl_vel() const {
  return !_is_default_instance_ && whirl_vel_ != NULL;
}
inline void DecisionConfig::clear_whirl_vel() {
  if (GetArenaNoVirtual() == NULL && whirl_vel_ != NULL) delete whirl_vel_;
  whirl_vel_ = NULL;
}
inline const ::roborts_decision::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_ != NULL ? *whirl_vel_ : *default_instance_->whirl_vel_;
}
inline ::roborts_decision::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  
  if (whirl_vel_ == NULL) {
    whirl_vel_ = new ::roborts_decision::WhirlVel;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_;
}
inline ::roborts_decision::WhirlVel* DecisionConfig::release_whirl_vel() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.whirl_vel)
  
  ::roborts_decision::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel) {
  delete whirl_vel_;
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.whirl_vel)
}

// repeated .roborts_decision.Point lurk_position = 14;
inline int DecisionConfig::lurk_position_size() const {
  return lurk_position_.size();
}
inline void DecisionConfig::clear_lurk_position() {
  lurk_position_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::lurk_position(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.lurk_position)
  return lurk_position_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_lurk_position(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.lurk_position)
  return lurk_position_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_lurk_position() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.lurk_position)
  return lurk_position_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_lurk_position() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.lurk_position)
  return &lurk_position_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::lurk_position() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.lurk_position)
  return lurk_position_;
}

// repeated .roborts_decision.Point search_region_1 = 15;
inline int DecisionConfig::search_region_1_size() const {
  return search_region_1_.size();
}
inline void DecisionConfig::clear_search_region_1() {
  search_region_1_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_1(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_1(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_1() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_1() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_1)
  return &search_region_1_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_1() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_;
}

// repeated .roborts_decision.Point search_region_2 = 16;
inline int DecisionConfig::search_region_2_size() const {
  return search_region_2_.size();
}
inline void DecisionConfig::clear_search_region_2() {
  search_region_2_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_2(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_2(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_2() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_2() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_2)
  return &search_region_2_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_2() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_;
}

// repeated .roborts_decision.Point search_region_3 = 17;
inline int DecisionConfig::search_region_3_size() const {
  return search_region_3_.size();
}
inline void DecisionConfig::clear_search_region_3() {
  search_region_3_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_3(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_3(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_3() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_3() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_3)
  return &search_region_3_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_3() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_;
}

// repeated .roborts_decision.Point search_region_4 = 18;
inline int DecisionConfig::search_region_4_size() const {
  return search_region_4_.size();
}
inline void DecisionConfig::clear_search_region_4() {
  search_region_4_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_4(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_4(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_4() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_4() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_4)
  return &search_region_4_;
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_4() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_;
}

// optional bool can_shoot = 19;
inline void DecisionConfig::clear_can_shoot() {
  can_shoot_ = false;
}
inline bool DecisionConfig::can_shoot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.can_shoot)
  return can_shoot_;
}
inline void DecisionConfig::set_can_shoot(bool value) {
  
  can_shoot_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.can_shoot)
}

// optional int32 shoot_delay_ms = 20;
inline void DecisionConfig::clear_shoot_delay_ms() {
  shoot_delay_ms_ = 0;
}
inline ::google::protobuf::int32 DecisionConfig::shoot_delay_ms() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.shoot_delay_ms)
  return shoot_delay_ms_;
}
inline void DecisionConfig::set_shoot_delay_ms(::google::protobuf::int32 value) {
  
  shoot_delay_ms_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.shoot_delay_ms)
}

// optional bool use_refree = 21;
inline void DecisionConfig::clear_use_refree() {
  use_refree_ = false;
}
inline bool DecisionConfig::use_refree() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.use_refree)
  return use_refree_;
}
inline void DecisionConfig::set_use_refree(bool value) {
  
  use_refree_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.use_refree)
}

// optional float map_offset_x = 22;
inline void DecisionConfig::clear_map_offset_x() {
  map_offset_x_ = 0;
}
inline float DecisionConfig::map_offset_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.map_offset_x)
  return map_offset_x_;
}
inline void DecisionConfig::set_map_offset_x(float value) {
  
  map_offset_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.map_offset_x)
}

// optional float map_offset_y = 23;
inline void DecisionConfig::clear_map_offset_y() {
  map_offset_y_ = 0;
}
inline float DecisionConfig::map_offset_y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.map_offset_y)
  return map_offset_y_;
}
inline void DecisionConfig::set_map_offset_y(float value) {
  
  map_offset_y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.map_offset_y)
}

// optional bool auto_init_pose = 24;
inline void DecisionConfig::clear_auto_init_pose() {
  auto_init_pose_ = false;
}
inline bool DecisionConfig::auto_init_pose() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.auto_init_pose)
  return auto_init_pose_;
}
inline void DecisionConfig::set_auto_init_pose(bool value) {
  
  auto_init_pose_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.auto_init_pose)
}

// optional bool auto_fix_localization = 25;
inline void DecisionConfig::clear_auto_fix_localization() {
  auto_fix_localization_ = false;
}
inline bool DecisionConfig::auto_fix_localization() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.auto_fix_localization)
  return auto_fix_localization_;
}
inline void DecisionConfig::set_auto_fix_localization(bool value) {
  
  auto_fix_localization_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.auto_fix_localization)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_decision_2eproto__INCLUDED
